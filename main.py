import sys
import os
import json
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QPushButton, QLineEdit, QListWidget, QFileDialog,
                             QMessageBox, QTabWidget, QSpinBox, QFormLayout, QSizePolicy,
                             QFrame, QListWidgetItem, QDialog)
from PyQt5.QtGui import QPixmap, QFont, QPalette, QColor
from PyQt5.QtCore import Qt, QSize


class SuccessDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.setFixedSize(400, 200)

        layout = QVBoxLayout()
        self.setLayout(layout)

        self.label = QLabel("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Å–ª–∞–π–¥-—à–æ—É!")
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setWordWrap(True)
        self.label.setStyleSheet("font-size: 16px;")

        self.btn_close = QPushButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
        self.btn_close.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                font-size: 14px;
                padding: 10px;
                min-width: 100px;
            }
        """)

        layout.addWidget(self.label)
        layout.addWidget(self.btn_close)

        self.btn_close.clicked.connect(self.accept)


class ImageCodeEditor(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.current_selected = None

    def initUI(self):
        self.layout = QVBoxLayout()
        self.layout.setSpacing(15)
        self.layout.setContentsMargins(15, 15, 15, 15)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.setStyleSheet("""
            QWidget {
                background-color: #2d2d2d;
                color: #e0e0e0;
            }
            QPushButton {
                padding: 8px;
                border-radius: 5px;
                font-weight: bold;
                min-width: 120px;
            }
            QPushButton:hover {
                opacity: 0.9;
            }
            QListWidget {
                border: 1px solid #444;
                border-radius: 5px;
                font-size: 14px;
                background-color: #353535;
                outline: none;
            }
            QListWidget::item {
                border-bottom: 1px solid #444;
            }
            QListWidget::item:selected {
                background-color: #3a3a3a;
                border: 1px solid #555;
                border-radius: 3px;
            }
            QLineEdit {
                padding: 8px;
                border: 1px solid #444;
                border-radius: 5px;
                font-size: 14px;
                background-color: #353535;
                color: #e0e0e0;
            }
            QLabel {
                color: #e0e0e0;
            }
        """)

        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.btn_add = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        self.btn_add.setStyleSheet("background-color: #4CAF50;")
        self.btn_remove = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.btn_remove.setStyleSheet("background-color: #f44336;")
        self.btn_move_up = QPushButton("‚¨Ü –í–≤–µ—Ä—Ö")
        self.btn_move_up.setStyleSheet("background-color: #2196F3;")
        self.btn_move_down = QPushButton("‚¨á –í–Ω–∏–∑")
        self.btn_move_down.setStyleSheet("background-color: #2196F3;")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.btn_add.setMinimumHeight(40)
        self.btn_remove.setMinimumHeight(40)
        self.btn_move_up.setMinimumHeight(30)
        self.btn_move_down.setMinimumHeight(30)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        line1 = QFrame()
        line1.setFrameShape(QFrame.HLine)
        line1.setFrameShadow(QFrame.Sunken)
        line1.setStyleSheet("color: #444;")

        # –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–∞—Ä–æ–ª—è–º–∏
        self.list_images = QListWidget()
        self.list_images.setMinimumHeight(300)
        self.list_images.setSelectionMode(QListWidget.SingleSelection)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        line2 = QFrame()
        line2.setFrameShape(QFrame.HLine)
        line2.setFrameShadow(QFrame.Sunken)
        line2.setStyleSheet("color: #444;")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self.btn_add)
        btn_layout.addWidget(self.btn_remove)

        move_btn_layout = QHBoxLayout()
        move_btn_layout.addWidget(self.btn_move_up)
        move_btn_layout.addWidget(self.btn_move_down)

        # –§–æ—Ä–º–∞ –¥–ª—è –∫–æ–¥–∞ —Å —Ä–∞–º–∫–æ–π
        code_frame = QFrame()
        code_frame.setFrameShape(QFrame.StyledPanel)
        code_frame.setStyleSheet("""
            QFrame {
                background-color: #353535;
                border: 1px solid #444;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        code_layout = QVBoxLayout(code_frame)

        self.code_input = QLineEdit()
        self.code_input.setMinimumHeight(40)
        self.btn_save_code = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–¥")
        self.btn_save_code.setStyleSheet("background-color: #FF9800;")
        self.btn_save_code.setMinimumHeight(40)

        code_layout.addWidget(QLabel("–ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:"))
        code_layout.addWidget(self.code_input)
        code_layout.addWidget(self.btn_save_code)

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.btn_add.clicked.connect(self.add_images)
        self.btn_remove.clicked.connect(self.remove_image)
        self.btn_move_up.clicked.connect(self.move_up)
        self.btn_move_down.clicked.connect(self.move_down)
        self.btn_save_code.clicked.connect(self.save_code)
        self.list_images.currentItemChanged.connect(self.update_code_display)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.layout.addLayout(btn_layout)
        self.layout.addWidget(line1)
        self.layout.addWidget(self.list_images)
        self.layout.addWidget(line2)
        self.layout.addLayout(move_btn_layout)
        self.layout.addWidget(code_frame)
        self.layout.addStretch(1)

        self.setLayout(self.layout)

        # –î–∞–Ω–Ω—ã–µ
        self.images = []
        self.codes = {}

    def add_images(self):
        files, _ = QFileDialog.getOpenFileNames(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "",
            "Images (*.png *.jpg *.jpeg *.bmp *.gif)"
        )

        if files:
            # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å 1
            start_num = len(self.images) + 1

            for i, file in enumerate(files, start=start_num):
                self.images.append(file)
                self.codes[file] = str(i)
                self.add_image_to_list(file)

    def add_image_to_list(self, file_path):
        """–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫"""
        item = QListWidgetItem()
        self.list_images.addItem(item)
        self.setup_list_item(item, file_path)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
        if self.list_images.count() == 1:
            self.list_images.setCurrentRow(0)

    def setup_list_item(self, item, file_path):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞"""
        widget = QWidget()
        layout = QHBoxLayout()
        widget.setLayout(layout)

        # –ò–∫–æ–Ω–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        icon_label = QLabel()
        pixmap = QPixmap(file_path)
        if not pixmap.isNull():
            icon_label.setPixmap(pixmap.scaled(60, 60, Qt.KeepAspectRatio, Qt.SmoothTransformation))

        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        name_label = QLabel(os.path.basename(file_path))
        name_label.setStyleSheet("font-weight: bold;")

        # –ü–∞—Ä–æ–ª—å
        code_label = QLabel(f"–ö–æ–¥: {self.codes.get(file_path, '')}")
        code_label.setStyleSheet("color: #FF9800;")

        layout.addWidget(icon_label)
        layout.addWidget(name_label, stretch=1)
        layout.addWidget(code_label)
        layout.setContentsMargins(5, 5, 5, 5)

        item.setSizeHint(widget.sizeHint())
        self.list_images.setItemWidget(item, widget)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤—ã–¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω
        if self.list_images.currentItem() == item:
            widget.setStyleSheet("background-color: #3a3a3a; border: 1px solid #555; border-radius: 3px;")

    def remove_image(self):
        if not self.images:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            return

        current_row = self.list_images.currentRow()
        if 0 <= current_row < len(self.images):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                removed_image = self.images.pop(current_row)

                # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.list_images.takeItem(current_row)

                # –£–¥–∞–ª—è–µ–º –∫–æ–¥, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                self.codes.pop(removed_image, None)

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                if self.list_images.currentRow() >= 0:
                    self.update_code_display(self.list_images.currentItem(), None)
                else:
                    self.code_input.clear()

            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")

    def move_up(self):
        current_row = self.list_images.currentRow()
        if current_row > 0:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            current_item = self.list_images.item(current_row)
            current_widget = self.list_images.itemWidget(current_item)
            current_image = self.images[current_row]

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            prev_item = self.list_images.item(current_row - 1)
            prev_widget = self.list_images.itemWidget(prev_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–∞—Ö
            self.images[current_row], self.images[current_row - 1] = (
                self.images[current_row - 1], self.images[current_row]
            )

            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.list_images.removeItemWidget(current_item)
            self.list_images.removeItemWidget(prev_item)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.setup_list_item(current_item, self.images[current_row])
            self.setup_list_item(prev_item, self.images[current_row - 1])

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            self.list_images.setCurrentRow(current_row - 1)

    def move_down(self):
        current_row = self.list_images.currentRow()
        if current_row < self.list_images.count() - 1:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            current_item = self.list_images.item(current_row)
            current_widget = self.list_images.itemWidget(current_item)
            current_image = self.images[current_row]

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            next_item = self.list_images.item(current_row + 1)
            next_widget = self.list_images.itemWidget(next_item)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–∞—Ö
            self.images[current_row], self.images[current_row + 1] = (
                self.images[current_row + 1], self.images[current_row]
            )

            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.list_images.removeItemWidget(current_item)
            self.list_images.removeItemWidget(next_item)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–∂–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.setup_list_item(current_item, self.images[current_row])
            self.setup_list_item(next_item, self.images[current_row + 1])

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            self.list_images.setCurrentRow(current_row + 1)

    def update_code_display(self, current, previous):
        if previous is not None:
            prev_widget = self.list_images.itemWidget(previous)
            if prev_widget:
                prev_widget.setStyleSheet("")

        if current is not None:
            current_widget = self.list_images.itemWidget(current)
            if current_widget:
                current_widget.setStyleSheet("background-color: #3a3a3a; border: 1px solid #555; border-radius: 3px;")

            current_row = self.list_images.row(current)
            if current_row >= 0 and self.images:
                current_image = self.images[current_row]
                self.code_input.setText(self.codes.get(current_image, ""))

    def save_code(self):
        current_row = self.list_images.currentRow()
        if current_row >= 0 and self.images:
            current_image = self.images[current_row]
            new_code = self.code_input.text()
            self.codes[current_image] = new_code

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Å–ø–∏—Å–∫–µ
            item = self.list_images.item(current_row)
            widget = self.list_images.itemWidget(item)
            code_label = widget.layout().itemAt(2).widget()
            code_label.setText(f"–ö–æ–¥: {new_code}")

            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    def get_config(self):
        return {
            "images": self.images,
            "codes": self.codes
        }

    def set_config(self, config):
        self.images = config.get("images", [])
        self.codes = config.get("codes", {})

        self.list_images.clear()
        for image in self.images:
            self.add_image_to_list(image)


class SlideShowViewer(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_window = parent
        self.initUI()
        self.current_index = 0
        self.slideshow_active = False

    def initUI(self):
        self.layout = QVBoxLayout()
        self.layout.setSpacing(20)
        self.layout.setContentsMargins(15, 15, 15, 15)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.setStyleSheet("""
            QWidget {
                background-color: #2d2d2d;
                color: #e0e0e0;
            }
            QPushButton {
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
                min-width: 100px;
            }
            QLineEdit {
                padding: 10px;
                border: 1px solid #444;
                border-radius: 5px;
                font-size: 16px;
                background-color: #353535;
                color: #e0e0e0;
            }
            QLabel#image_label {
                border: 2px solid #444;
                border-radius: 5px;
                background-color: #353535;
            }
            QLabel {
                color: #e0e0e0;
            }
        """)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.image_label = QLabel()
        self.image_label.setObjectName("image_label")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        line1 = QFrame()
        line1.setFrameShape(QFrame.HLine)
        line1.setFrameShadow(QFrame.Sunken)
        line1.setStyleSheet("color: #444;")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å —Ä–∞–º–∫–æ–π
        input_frame = QFrame()
        input_frame.setFrameShape(QFrame.StyledPanel)
        input_frame.setStyleSheet("""
            QFrame {
                background-color: #353535;
                border: 1px solid #444;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        input_layout = QVBoxLayout(input_frame)

        self.code_input = QLineEdit()
        self.code_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞...")
        self.code_input.setMinimumHeight(50)

        input_layout.addWidget(QLabel("–ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:"))
        input_layout.addWidget(self.code_input)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        line2 = QFrame()
        line2.setFrameShape(QFrame.HLine)
        line2.setFrameShadow(QFrame.Sunken)
        line2.setStyleSheet("color: #444;")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.btn_prev = QPushButton("‚è™ –ù–∞–∑–∞–¥")
        self.btn_prev.setStyleSheet("background-color: #2196F3;")
        self.btn_next = QPushButton("–í–ø–µ—Ä–µ–¥ ‚è© (Enter)")
        self.btn_next.setStyleSheet("background-color: #4CAF50;")
        self.btn_close = QPushButton("üö™ –ó–∞–∫—Ä—ã—Ç—å —Å–ª–∞–π–¥-—à–æ—É")
        self.btn_close.setStyleSheet("background-color: #f44336;")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∫–Ω–æ–ø–æ–∫
        font = QFont()
        font.setPointSize(12)
        self.btn_prev.setFont(font)
        self.btn_next.setFont(font)
        self.btn_close.setFont(font)

        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self.btn_prev)
        btn_layout.addWidget(self.btn_next)
        btn_layout.addWidget(self.btn_close)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.layout.addWidget(self.image_label, stretch=5)
        self.layout.addWidget(line1)
        self.layout.addWidget(input_frame, stretch=1)
        self.layout.addWidget(line2)
        self.layout.addLayout(btn_layout, stretch=1)

        self.setLayout(self.layout)

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.btn_prev.clicked.connect(self.prev_image)
        self.btn_next.clicked.connect(self.next_image)
        self.btn_close.clicked.connect(self.close_slideshow)
        self.code_input.returnPressed.connect(self.next_image)

    def start_slideshow(self, images, codes):
        if not images:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞!")
            return

        self.images = images
        self.codes = codes
        self.current_index = 0
        self.slideshow_active = True
        self.show_image()

    def show_image(self):
        if not self.slideshow_active:
            return

        if self.images and self.current_index < len(self.images):
            pixmap = QPixmap(self.images[self.current_index])
            if not pixmap.isNull():
                self.image_label.setPixmap(
                    pixmap.scaled(
                        self.image_label.size(),
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                )
                self.code_input.clear()
                self.code_input.setFocus()
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.images[self.current_index]}")

    def prev_image(self):
        if not self.slideshow_active:
            return

        if self.current_index > 0:
            self.current_index -= 1
            self.show_image()

    def next_image(self):
        if not self.slideshow_active:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–ª–∞–π–¥-—à–æ—É –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            return

        if not self.images:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞!")
            return

        if self.current_index >= len(self.images) - 1:
            # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            current_image = self.images[self.current_index]
            required_code = self.codes.get(current_image, "")

            if self.code_input.text() == required_code:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                success_dialog = SuccessDialog(self)
                success_dialog.exec_()

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ª–∞–π–¥-—à–æ—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                self.close_slideshow()
                self.parent_window.tabs.setCurrentIndex(0)
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
            return

        current_image = self.images[self.current_index]
        required_code = self.codes.get(current_image, "")

        if self.code_input.text() == required_code:
            self.current_index += 1
            self.show_image()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")

    def close_slideshow(self):
        self.slideshow_active = False
        self.image_label.clear()
        self.code_input.clear()
        self.parent_window.tabs.setTabEnabled(0, True)
        self.parent_window.tabs.setCurrentIndex(0)
        self.parent_window.tabs.setTabEnabled(1, False)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.load_config()

    def initUI(self):
        self.setWindowTitle("–°–ª–∞–π–¥-—à–æ—É —Å –∫–æ–¥–∞–º–∏")
        self.setGeometry(100, 100, 1000, 700)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.WindowText, Qt.white)
        dark_palette.setColor(QPalette.Base, QColor(35, 35, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
        dark_palette.setColor(QPalette.ToolTipText, Qt.white)
        dark_palette.setColor(QPalette.Text, Qt.white)
        dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ButtonText, Qt.white)
        dark_palette.setColor(QPalette.BrightText, Qt.red)
        dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
        dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
        dark_palette.setColor(QPalette.HighlightedText, Qt.black)
        self.setPalette(dark_palette)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2d2d2d;
            }
            QTabWidget::pane {
                border: 1px solid #444;
                border-radius: 5px;
                padding: 5px;
                background: #353535;
            }
            QTabBar::tab {
                padding: 8px 15px;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
                background: #353535;
                color: #e0e0e0;
                border: 1px solid #444;
            }
            QTabBar::tab:selected {
                background: #2d2d2d;
                border-bottom: 2px solid #4CAF50;
            }
            QTabBar::tab:hover {
                background: #3d3d3d;
            }
            QMessageBox {
                background-color: #2d2d2d;
            }
            QMessageBox QLabel {
                color: #e0e0e0;
                min-width: 300px;
            }
        """)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setFont(QFont("Arial", 10))

        # –†–µ–¥–∞–∫—Ç–æ—Ä
        self.editor = ImageCodeEditor()

        # –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫
        self.viewer = SlideShowViewer(self)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª–∞–π–¥-—à–æ—É
        self.btn_start = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–∞–π–¥-—à–æ—É")
        self.btn_start.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                font-size: 16px;
                padding: 15px;
                min-width: 200px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        self.btn_save.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                font-weight: bold;
                font-size: 16px;
                padding: 15px;
                min-width: 200px;
            }
            QPushButton:hover {
                background-color: #0b7dda;
            }
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs.addTab(self.editor, "üìù –†–µ–¥–∞–∫—Ç–æ—Ä")
        self.tabs.addTab(self.viewer, "üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä")

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–ª–∞–π–¥-—à–æ—É
        self.tabs.setTabEnabled(1, False)

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        line.setStyleSheet("color: #444;")

        # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_layout = QHBoxLayout()
        btn_layout.addWidget(self.btn_start)
        btn_layout.addWidget(self.btn_save)
        btn_layout.setSpacing(20)

        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.tabs)
        main_layout.addWidget(line)
        main_layout.addLayout(btn_layout)
        main_layout.setContentsMargins(15, 15, 15, 15)
        main_layout.setSpacing(20)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.btn_start.clicked.connect(self.start_slideshow)
        self.btn_save.clicked.connect(self.save_config)
        self.tabs.currentChanged.connect(self.on_tab_changed)

    def start_slideshow(self):
        config = self.editor.get_config()
        if not config["images"]:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
            return

        self.viewer.start_slideshow(config["images"], config["codes"])
        self.tabs.setTabEnabled(1, True)
        self.tabs.setCurrentIndex(1)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.tabs.setTabEnabled(0, False)

    def on_tab_changed(self, index):
        # –ï—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–ª–∞–π–¥-—à–æ—É
        if index == 1 and not self.viewer.slideshow_active:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ª–∞–π–¥-—à–æ—É!")
            self.tabs.setCurrentIndex(0)

    def save_config(self):
        config = self.editor.get_config()
        try:
            with open("config.json", "w") as f:
                json.dump(config, f)
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {str(e)}")

    def load_config(self):
        try:
            if os.path.exists("config.json"):
                with open("config.json", "r") as f:
                    config = json.load(f)
                self.editor.set_config(config)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {str(e)}")

    def resizeEvent(self, event):
        # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if self.tabs.currentIndex() == 1 and self.viewer.slideshow_active:
            self.viewer.show_image()
        super().resizeEvent(event)


def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å

    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()